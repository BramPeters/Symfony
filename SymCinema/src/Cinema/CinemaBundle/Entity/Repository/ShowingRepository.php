<?php

namespace Cinema\CinemaBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ShowingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShowingRepository extends EntityRepository
{
    
    public function getShowingsForMovie($movieId)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->where("c.Movie = :movie_id AND c.startingtime > current_date()")
                   ->addOrderBy('c.startingtime')
                   ->setParameter('movie_id', $movieId);

//        if (false === is_null($approved))
//            $qb->andWhere('c.approved = :approved')
//               ->setParameter('approved', $approved);

        return $qb->getQuery()
                  ->getResult();
    }
    
    public function getShowingsForToday($currentDay, $tomorrow)
    {
      //  $count = 5;
        //$currentDay=date("Y-m-d");        
        //$today  = mktime(date("Y")  , date("m"), date("d")-5);
        //$tomorrow  = date("Y-m-"."d");
        //$tomorrow = $tomorrow-1;
        //$tomorrow  = mktime(0, 0, 0, date("m")  , date("d"), date("Y"));
        //$tomorrow = date("Y-m-d", strtotime('+1 day'));
        //print($tomorrow);
        //$tomorrow  = mktime(0, 0, 0, date("m")  , date("d")+2, date("Y"));
        //$nextDay=$currentDay+1;
        
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
         //          ->where("c.soldtickets > :count")
                   ->where("c.startingtime between :currentday and :nextday")
                   ->addOrderBy('c.startingtime')                
                   ->setParameter(':currentday', $currentDay)
                   ->setParameter(':nextday', $tomorrow)
                  ;

        return $qb->getQuery()
                  ->getResult();
    }
    
    
    
    
//     public function getTodaysMovies()
//    {
//        $qb = $this->createQueryBuilder('c')
//                   ->select('c')
//                   ->where("c.startingtime between current_date() AND current_date()+1")
//                   ->addOrderBy('c.startingtime')
//                   ;
//
////        if (false === is_null($approved))
////            $qb->andWhere('c.approved = :approved')
////               ->setParameter('approved', $approved);
//
//        return $qb->getQuery()
//                  ->getResult();
//    }
    
    public function getMoviesByDate($date)
    {
        $qb = $this->createQueryBuilder('c')
                   ->select('c')
                   ->where("c.startingtime  between :date AND :date+1")
                   ->addOrderBy('c.startingtime', 'ASC')
                   ->setParameter('date', $date);


        return $qb->getQuery()
                  ->getResult();
    }
}



